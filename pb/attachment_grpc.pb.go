// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: attachment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AttachmentService_CreateMultiple_FullMethodName = "/attachment.AttachmentService/CreateMultiple"
	AttachmentService_FetchSingle_FullMethodName    = "/attachment.AttachmentService/FetchSingle"
	AttachmentService_FetchAll_FullMethodName       = "/attachment.AttachmentService/FetchAll"
	AttachmentService_Delete_FullMethodName         = "/attachment.AttachmentService/Delete"
)

// AttachmentServiceClient is the client API for AttachmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttachmentServiceClient interface {
	CreateMultiple(ctx context.Context, in *RequestAttachments, opts ...grpc.CallOption) (*ResponseAttachments, error)
	FetchSingle(ctx context.Context, in *FindOneRequestParams, opts ...grpc.CallOption) (*ResponseAttachment, error)
	FetchAll(ctx context.Context, in *FindAllRequestParams, opts ...grpc.CallOption) (*ResponseAttachments, error)
	Delete(ctx context.Context, in *AttachmentIDs, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type attachmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachmentServiceClient(cc grpc.ClientConnInterface) AttachmentServiceClient {
	return &attachmentServiceClient{cc}
}

func (c *attachmentServiceClient) CreateMultiple(ctx context.Context, in *RequestAttachments, opts ...grpc.CallOption) (*ResponseAttachments, error) {
	out := new(ResponseAttachments)
	err := c.cc.Invoke(ctx, AttachmentService_CreateMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) FetchSingle(ctx context.Context, in *FindOneRequestParams, opts ...grpc.CallOption) (*ResponseAttachment, error) {
	out := new(ResponseAttachment)
	err := c.cc.Invoke(ctx, AttachmentService_FetchSingle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) FetchAll(ctx context.Context, in *FindAllRequestParams, opts ...grpc.CallOption) (*ResponseAttachments, error) {
	out := new(ResponseAttachments)
	err := c.cc.Invoke(ctx, AttachmentService_FetchAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) Delete(ctx context.Context, in *AttachmentIDs, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, AttachmentService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachmentServiceServer is the server API for AttachmentService service.
// All implementations must embed UnimplementedAttachmentServiceServer
// for forward compatibility
type AttachmentServiceServer interface {
	CreateMultiple(context.Context, *RequestAttachments) (*ResponseAttachments, error)
	FetchSingle(context.Context, *FindOneRequestParams) (*ResponseAttachment, error)
	FetchAll(context.Context, *FindAllRequestParams) (*ResponseAttachments, error)
	Delete(context.Context, *AttachmentIDs) (*DeleteResponse, error)
	mustEmbedUnimplementedAttachmentServiceServer()
}

// UnimplementedAttachmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttachmentServiceServer struct {
}

func (UnimplementedAttachmentServiceServer) CreateMultiple(context.Context, *RequestAttachments) (*ResponseAttachments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiple not implemented")
}
func (UnimplementedAttachmentServiceServer) FetchSingle(context.Context, *FindOneRequestParams) (*ResponseAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSingle not implemented")
}
func (UnimplementedAttachmentServiceServer) FetchAll(context.Context, *FindAllRequestParams) (*ResponseAttachments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAll not implemented")
}
func (UnimplementedAttachmentServiceServer) Delete(context.Context, *AttachmentIDs) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAttachmentServiceServer) mustEmbedUnimplementedAttachmentServiceServer() {}

// UnsafeAttachmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttachmentServiceServer will
// result in compilation errors.
type UnsafeAttachmentServiceServer interface {
	mustEmbedUnimplementedAttachmentServiceServer()
}

func RegisterAttachmentServiceServer(s grpc.ServiceRegistrar, srv AttachmentServiceServer) {
	s.RegisterService(&AttachmentService_ServiceDesc, srv)
}

func _AttachmentService_CreateMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAttachments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).CreateMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentService_CreateMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).CreateMultiple(ctx, req.(*RequestAttachments))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_FetchSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).FetchSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentService_FetchSingle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).FetchSingle(ctx, req.(*FindOneRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_FetchAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).FetchAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentService_FetchAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).FetchAll(ctx, req.(*FindAllRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachmentIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).Delete(ctx, req.(*AttachmentIDs))
	}
	return interceptor(ctx, in, info, handler)
}

// AttachmentService_ServiceDesc is the grpc.ServiceDesc for AttachmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttachmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attachment.AttachmentService",
	HandlerType: (*AttachmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMultiple",
			Handler:    _AttachmentService_CreateMultiple_Handler,
		},
		{
			MethodName: "FetchSingle",
			Handler:    _AttachmentService_FetchSingle_Handler,
		},
		{
			MethodName: "FetchAll",
			Handler:    _AttachmentService_FetchAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AttachmentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attachment.proto",
}
